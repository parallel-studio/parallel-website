/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type AboutSection = {
  _type: 'about-section'
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
    _type: 'link'
    _key: string
  }>
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?:
      | 'normal'
      | 'h1'
      | 'h2'
      | 'h3'
      | 'h4'
      | 'h5'
      | 'link-large'
      | 'link-small'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  linkContent?: {
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
  }
  jobs?: Array<{
    title?: string
    link?: {
      isExternal?: boolean
      targetBlank?: boolean
      page?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page-parallel'
      }
      url?: string
      title?: string
    }
    _type: 'job'
    _key: string
  }>
  bottomContentLeft?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?:
      | 'normal'
      | 'h1'
      | 'h2'
      | 'h3'
      | 'h4'
      | 'h5'
      | 'link-large'
      | 'link-small'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  bottomContentRight?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?:
      | 'normal'
      | 'h1'
      | 'h2'
      | 'h3'
      | 'h4'
      | 'h5'
      | 'link-large'
      | 'link-small'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type ProjectsGrid = {
  _type: 'projects-grid'
  projects?: Array<{
    project?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'project-parallel'
    }
    video?: 'video_short' | 'video_long' | 'video_grid'
    muxPlaceholderTimestamp?: string
    size?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'grid-size'
    }
    _type: 'projectItem'
    _key: string
  }>
}

export type ProjectGridRowType = {
  _type: 'project-grid-row-type'
  projectItem?: {
    project?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'project-parallel'
    }
    video?: 'video_short' | 'video_long' | 'video_grid'
    muxPlaceholderTimestamp?: string
    size?: 'wide' | 'medium' | 'narrow'
  }
}

export type FullScreenInfiniteProjectSlider = {
  _type: 'full-screen-infinite-project-slider'
  title?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?:
      | 'normal'
      | 'h1'
      | 'h2'
      | 'h3'
      | 'h4'
      | 'h5'
      | 'link-large'
      | 'link-small'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  settings?: {
    sliderSpeed?: number
  }
  projects?: Array<
    | {
        project?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'project-parallel'
        }
        video?: 'video_short' | 'video_long' | 'video_grid'
        muxPlaceholderTimestamp?: string
        _type: 'project'
        _key: string
      }
    | {
        title?: string
        tagLabel?: string
        tag?: string
        video?: MuxVideo
        muxPlaceholderTimestamp?: string
        _type: 'item'
        _key: string
      }
  >
}

export type TwoColumnTextImage = {
  _type: 'two-column-text-image'
  leftSlot?: {
    contentType?: 'text' | 'image'
    text?: RichText
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }
  rightSlot?: {
    contentType?: 'text' | 'image'
    text?: string
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }
}

export type CustomColumnImageGrid = {
  _type: 'custom-column-image-grid'
  images?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
    _key: string
  }>
}

export type CustomColumnMediaGrid = {
  _type: 'custom-column-media-grid'
  width?: number
  media?: Array<
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & MuxVideo)
  >
}

export type ProjectHero = {
  _type: 'project-hero'
  layout?: 'full-width' | 'two-column'
  video?: 'video_short' | 'video_long' | 'video_grid'
  muxPlaceholderTimestamp?: string
}

export type FullWidthVideo = {
  _type: 'full-width-video'
  video?: MuxVideo
  muxPlaceholderTimestamp?: string
}

export type Locale = {
  _id: string
  _type: 'locale'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  id?: string
}

export type InternationalizedArrayTextValue = {
  _type: 'internationalizedArrayTextValue'
  value?: string
}

export type InternationalizedArrayStringValue = {
  _type: 'internationalizedArrayStringValue'
  value?: string
}

export type InternationalizedArrayText = Array<
  {
    _key: string
  } & InternationalizedArrayTextValue
>

export type InternationalizedArrayString = Array<
  {
    _key: string
  } & InternationalizedArrayStringValue
>

export type TranslationMetadata = {
  _id: string
  _type: 'translation.metadata'
  _createdAt: string
  _updatedAt: string
  _rev: string
  translations?: Array<
    {
      _key: string
    } & InternationalizedArrayReferenceValue
  >
  schemaTypes?: Array<string>
}

export type InternationalizedArrayReferenceValue = {
  _type: 'internationalizedArrayReferenceValue'
  value?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home-page-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home-page-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'project-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'project-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'footer-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'footer-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'header-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'header-parallel'
      }
}

export type HeaderParallel = {
  _id: string
  _type: 'header-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
    _type: 'link'
    _key: string
  }>
}

export type HeaderParachutes = {
  _id: string
  _type: 'header-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parachutes'
    }
    url?: string
    _type: 'link'
    _key: string
  }>
}

export type FooterParallel = {
  _id: string
  _type: 'footer-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
    _type: 'link'
    _key: string
  }>
}

export type FooterParachutes = {
  _id: string
  _type: 'footer-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parachutes'
    }
    url?: string
    _type: 'link'
    _key: string
  }>
}

export type PageParachutes = {
  _id: string
  _type: 'page-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
}

export type ProjectParachutes = {
  _id: string
  _type: 'project-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
  color?: SimplerColor
  expertise?: string
  customer?: string
}

export type HomePageParallel = {
  _id: string
  _type: 'home-page-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
}

export type HomePageParachutes = {
  _id: string
  _type: 'home-page-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
}

export type ProjectParallel = {
  _id: string
  _type: 'project-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  slug?: Slug
  color?: SimplerColor
  details?: {
    title?: string
    description?: string
    expertise?: string
    customer?: string
  }
  Videos?: {
    video_short?: MuxVideo
    video_long?: MuxVideo
    video_grid?: MuxVideo
  }
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
}

export type PageParallel = {
  _id: string
  _type: 'page-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  slug?: Slug
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
}

export type GridSize = {
  _id: string
  _type: 'grid-size'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  size?: number
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type RichText = {
  _type: 'richText'
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?:
      | 'normal'
      | 'h1'
      | 'h2'
      | 'h3'
      | 'h4'
      | 'h5'
      | 'link-large'
      | 'link-small'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type InternationalizedArrayReference = Array<
  {
    _key: string
  } & InternationalizedArrayReferenceValue
>

export type HighlightColor = {
  _type: 'highlightColor'
  label?: string
  value?: string
}

export type TextColor = {
  _type: 'textColor'
  label?: string
  value?: string
}

export type SimplerColor = {
  _type: 'simplerColor'
  label?: string
  value?: string
}

export type MuxVideo = {
  _type: 'mux.video'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'mux.videoAsset'
  }
}

export type MuxVideoAsset = {
  _type: 'mux.videoAsset'
  status?: string
  assetId?: string
  playbackId?: string
  filename?: string
  thumbTime?: number
  data?: MuxAssetData
}

export type MuxAssetData = {
  _type: 'mux.assetData'
  resolution_tier?: string
  upload_id?: string
  created_at?: string
  id?: string
  status?: string
  max_stored_resolution?: string
  passthrough?: string
  encoding_tier?: string
  master_access?: string
  aspect_ratio?: string
  duration?: number
  max_stored_frame_rate?: number
  mp4_support?: string
  max_resolution_tier?: string
  tracks?: Array<
    {
      _key: string
    } & MuxTrack
  >
  playback_ids?: Array<
    {
      _key: string
    } & MuxPlaybackId
  >
  static_renditions?: MuxStaticRenditions
}

export type MuxStaticRenditions = {
  _type: 'mux.staticRenditions'
  status?: string
  files?: Array<
    {
      _key: string
    } & MuxStaticRenditionFile
  >
}

export type MuxStaticRenditionFile = {
  _type: 'mux.staticRenditionFile'
  ext?: string
  name?: string
  width?: number
  bitrate?: number
  filesize?: number
  height?: number
}

export type MuxPlaybackId = {
  _type: 'mux.playbackId'
  id?: string
  policy?: string
}

export type MuxTrack = {
  _type: 'mux.track'
  id?: string
  type?: string
  max_width?: number
  max_frame_rate?: number
  duration?: number
  max_height?: number
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | AboutSection
  | ProjectsGrid
  | ProjectGridRowType
  | FullScreenInfiniteProjectSlider
  | TwoColumnTextImage
  | CustomColumnImageGrid
  | ProjectHero
  | FullWidthVideo
  | Locale
  | InternationalizedArrayTextValue
  | InternationalizedArrayStringValue
  | InternationalizedArrayText
  | InternationalizedArrayString
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | HeaderParallel
  | HeaderParachutes
  | FooterParallel
  | FooterParachutes
  | PageParachutes
  | ProjectParachutes
  | HomePageParallel
  | HomePageParachutes
  | ProjectParallel
  | PageParallel
  | GridSize
  | Slug
  | RichText
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | InternationalizedArrayReference
  | HighlightColor
  | TextColor
  | SimplerColor
  | MuxVideo
  | MuxVideoAsset
  | MuxAssetData
  | MuxStaticRenditions
  | MuxStaticRenditionFile
  | MuxPlaybackId
  | MuxTrack
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/sanity/queries.ts
// Variable: FIELDS_LINK
// Query: {    title,    isExternal,    url,    "slug": page->slug.current,    targetBlank,  }
export type FIELDS_LINKResult = {
  title: never
  isExternal: never
  url: never
  slug: never
  targetBlank: never
}
// Variable: LOCALES_QUERY
// Query: *[_type == "locale"]{id, title}
export type LOCALES_QUERYResult = Array<{
  id: string | null
  title: string | null
}>
// Variable: LOCALES_QUERY_RESULT
// Query: *[_type == "locale"]{id, title}
export type LOCALES_QUERY_RESULTResult = Array<{
  id: string | null
  title: string | null
}>
// Variable: PARALLEL_FOOTER_QUERY
// Query: *[_type == "footer-parallel" && language == $language][0]{    ...,    links[]   {    title,    isExternal,    url,    "slug": page->slug.current,    targetBlank,  },  }
export type PARALLEL_FOOTER_QUERYResult = {
  _id: string
  _type: 'footer-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links: Array<{
    title: string | null
    isExternal: boolean | null
    url: string | null
    slug: string | null
    targetBlank: boolean | null
  }> | null
} | null
// Variable: PARALLEL_HEADER_QUERY
// Query: *[_type == "header-parallel" && language == $language][0]{    ...,    links[]   {    title,    isExternal,    url,    "slug": page->slug.current,    targetBlank,  },  }
export type PARALLEL_HEADER_QUERYResult = {
  _id: string
  _type: 'header-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links: Array<{
    title: string | null
    isExternal: boolean | null
    url: string | null
    slug: string | null
    targetBlank: boolean | null
  }> | null
} | null
// Variable: PARALLEL_PROJECTS_QUERY
// Query: *[_type == "project-parallel" && language == $language]  | order(_createdAt desc) {      _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  }  }
export type PARALLEL_PROJECTS_QUERYResult = Array<{
  _id: string
  _type: 'project-parallel'
  details: {
    title?: string
    description?: string
    expertise?: string
    customer?: string
  } | null
  slug: Slug | null
  language: string | null
  color: SimplerColor | null
  Videos: {
    video_short: {
      asset: null
    } | null
    video_long: {
      asset: null
    } | null
  } | null
}>
// Variable: PARALLEL_HOME_PAGE_QUERY
// Query: *[_type == "home-page-parallel" && language == $language][0]{    metaTitle,    metaDescription,    pageBuilder[] {  ...,  _type == "full-screen-infinite-project-slider" => {      "projects": projects[] {    _type,    "project": select(      _type == "project" => {        ...project->{          ...,            _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  }        },        "video": video,        "muxPlaceholderTimestamp": muxPlaceholderTimestamp,      }    ),    "item": select(      _type == "item" => {        ...,          _id,  _type,  title,  tagLabel,  tag,  video {    asset-> {      playbackId,      assetId,      filename,      aspect_ratio    }  },  muxPlaceholderTimestamp      }    )  }  },  _type == "projects-grid" => {      "projects": projects[] {    ...,    "size": size->{        _id,  _type,  title,  size    },    "project": project->{        _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  }    }  }  },    _type == "custom-column-image-grid" => {    ...,    images[] {      ...,        "url": asset->url    }  }}  }
export type PARALLEL_HOME_PAGE_QUERYResult = {
  metaTitle: string | null
  metaDescription: string | null
  pageBuilder: Array<
    | {
        _key: string
        _type: 'about-section'
        links?: Array<{
          isExternal?: boolean
          targetBlank?: boolean
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page-parallel'
          }
          url?: string
          title?: string
          _type: 'link'
          _key: string
        }>
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        linkContent?: {
          isExternal?: boolean
          targetBlank?: boolean
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page-parallel'
          }
          url?: string
          title?: string
        }
        jobs?: Array<{
          title?: string
          link?: {
            isExternal?: boolean
            targetBlank?: boolean
            page?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'page-parallel'
            }
            url?: string
            title?: string
          }
          _type: 'job'
          _key: string
        }>
        bottomContentLeft?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        bottomContentRight?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'custom-column-image-grid'
        images: Array<{
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
          _key: string
          url: string | null
        }> | null
      }
    | {
        _key: string
        _type: 'full-screen-infinite-project-slider'
        title?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        settings?: {
          sliderSpeed?: number
        }
        projects: Array<
          | {
              _type: 'item'
              project: null
              item: {
                title: string | null
                tagLabel: string | null
                tag: string | null
                video: {
                  asset: null
                } | null
                muxPlaceholderTimestamp: string | null
                _type: 'item'
                _key: string
                _id: null
              }
            }
          | {
              _type: 'project'
              project:
                | {
                    _id: string
                    _type: 'project-parallel'
                    _createdAt: string
                    _updatedAt: string
                    _rev: string
                    language: string | null
                    languageTitle?: string
                    metaTitle?: string
                    metaDescription?: string
                    slug: Slug | null
                    color: SimplerColor | null
                    details: {
                      title?: string
                      description?: string
                      expertise?: string
                      customer?: string
                    } | null
                    Videos: {
                      video_short: {
                        asset: null
                      } | null
                      video_long: {
                        asset: null
                      } | null
                    } | null
                    pageBuilder?: Array<
                      | ({
                          _key: string
                        } & AboutSection)
                      | ({
                          _key: string
                        } & CustomColumnImageGrid)
                      | ({
                          _key: string
                        } & FullScreenInfiniteProjectSlider)
                      | ({
                          _key: string
                        } & FullWidthVideo)
                      | ({
                          _key: string
                        } & ProjectHero)
                      | ({
                          _key: string
                        } & ProjectsGrid)
                      | ({
                          _key: string
                        } & RichText)
                      | ({
                          _key: string
                        } & TwoColumnTextImage)
                    >
                    video: 'video_grid' | 'video_long' | 'video_short' | null
                    muxPlaceholderTimestamp: string | null
                  }
                | {
                    video: 'video_grid' | 'video_long' | 'video_short' | null
                    muxPlaceholderTimestamp: string | null
                  }
              item: null
            }
        > | null
      }
    | {
        _key: string
        _type: 'full-width-video'
        video?: MuxVideo
        muxPlaceholderTimestamp?: string
      }
    | {
        _key: string
        _type: 'project-hero'
        layout?: 'full-width' | 'two-column'
        video?: 'video_grid' | 'video_long' | 'video_short'
        muxPlaceholderTimestamp?: string
      }
    | {
        _key: string
        _type: 'projects-grid'
        projects: Array<{
          project: {
            _id: string
            _type: 'project-parallel'
            details: {
              title?: string
              description?: string
              expertise?: string
              customer?: string
            } | null
            slug: Slug | null
            language: string | null
            color: SimplerColor | null
            Videos: {
              video_short: {
                asset: null
              } | null
              video_long: {
                asset: null
              } | null
            } | null
          } | null
          video?: 'video_grid' | 'video_long' | 'video_short'
          muxPlaceholderTimestamp?: string
          size: {
            _id: string
            _type: 'grid-size'
            title: string | null
            size: number | null
          } | null
          _type: 'projectItem'
          _key: string
        }> | null
      }
    | {
        _key: string
        _type: 'richText'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'two-column-text-image'
        leftSlot?: {
          contentType?: 'image' | 'text'
          text?: RichText
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            _type: 'image'
          }
        }
        rightSlot?: {
          contentType?: 'image' | 'text'
          text?: string
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            _type: 'image'
          }
        }
      }
  > | null
} | null
// Variable: PARALLEL_PAGE_QUERY
// Query: *[_type == "page-parallel" && language == $language && slug.current == $slug][0]{    metaTitle,    metaDescription,    slug,    pageBuilder[] {  ...,  _type == "full-screen-infinite-project-slider" => {      "projects": projects[] {    _type,    "project": select(      _type == "project" => {        ...project->{          ...,            _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  }        },        "video": video,        "muxPlaceholderTimestamp": muxPlaceholderTimestamp,      }    ),    "item": select(      _type == "item" => {        ...,          _id,  _type,  title,  tagLabel,  tag,  video {    asset-> {      playbackId,      assetId,      filename,      aspect_ratio    }  },  muxPlaceholderTimestamp      }    )  }  },  _type == "projects-grid" => {      "projects": projects[] {    ...,    "size": size->{        _id,  _type,  title,  size    },    "project": project->{        _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  }    }  }  },    _type == "custom-column-image-grid" => {    ...,    images[] {      ...,        "url": asset->url    }  }}  }
export type PARALLEL_PAGE_QUERYResult = {
  metaTitle: string | null
  metaDescription: string | null
  slug: Slug | null
  pageBuilder: Array<
    | {
        _key: string
        _type: 'about-section'
        links?: Array<{
          isExternal?: boolean
          targetBlank?: boolean
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page-parallel'
          }
          url?: string
          title?: string
          _type: 'link'
          _key: string
        }>
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        linkContent?: {
          isExternal?: boolean
          targetBlank?: boolean
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page-parallel'
          }
          url?: string
          title?: string
        }
        jobs?: Array<{
          title?: string
          link?: {
            isExternal?: boolean
            targetBlank?: boolean
            page?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'page-parallel'
            }
            url?: string
            title?: string
          }
          _type: 'job'
          _key: string
        }>
        bottomContentLeft?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        bottomContentRight?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'custom-column-image-grid'
        images: Array<{
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
          _key: string
          url: string | null
        }> | null
      }
    | {
        _key: string
        _type: 'full-screen-infinite-project-slider'
        title?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        settings?: {
          sliderSpeed?: number
        }
        projects: Array<
          | {
              _type: 'item'
              project: null
              item: {
                title: string | null
                tagLabel: string | null
                tag: string | null
                video: {
                  asset: null
                } | null
                muxPlaceholderTimestamp: string | null
                _type: 'item'
                _key: string
                _id: null
              }
            }
          | {
              _type: 'project'
              project:
                | {
                    _id: string
                    _type: 'project-parallel'
                    _createdAt: string
                    _updatedAt: string
                    _rev: string
                    language: string | null
                    languageTitle?: string
                    metaTitle?: string
                    metaDescription?: string
                    slug: Slug | null
                    color: SimplerColor | null
                    details: {
                      title?: string
                      description?: string
                      expertise?: string
                      customer?: string
                    } | null
                    Videos: {
                      video_short: {
                        asset: null
                      } | null
                      video_long: {
                        asset: null
                      } | null
                    } | null
                    pageBuilder?: Array<
                      | ({
                          _key: string
                        } & AboutSection)
                      | ({
                          _key: string
                        } & CustomColumnImageGrid)
                      | ({
                          _key: string
                        } & FullScreenInfiniteProjectSlider)
                      | ({
                          _key: string
                        } & FullWidthVideo)
                      | ({
                          _key: string
                        } & ProjectHero)
                      | ({
                          _key: string
                        } & ProjectsGrid)
                      | ({
                          _key: string
                        } & RichText)
                      | ({
                          _key: string
                        } & TwoColumnTextImage)
                    >
                    video: 'video_grid' | 'video_long' | 'video_short' | null
                    muxPlaceholderTimestamp: string | null
                  }
                | {
                    video: 'video_grid' | 'video_long' | 'video_short' | null
                    muxPlaceholderTimestamp: string | null
                  }
              item: null
            }
        > | null
      }
    | {
        _key: string
        _type: 'full-width-video'
        video?: MuxVideo
        muxPlaceholderTimestamp?: string
      }
    | {
        _key: string
        _type: 'project-hero'
        layout?: 'full-width' | 'two-column'
        video?: 'video_grid' | 'video_long' | 'video_short'
        muxPlaceholderTimestamp?: string
      }
    | {
        _key: string
        _type: 'projects-grid'
        projects: Array<{
          project: {
            _id: string
            _type: 'project-parallel'
            details: {
              title?: string
              description?: string
              expertise?: string
              customer?: string
            } | null
            slug: Slug | null
            language: string | null
            color: SimplerColor | null
            Videos: {
              video_short: {
                asset: null
              } | null
              video_long: {
                asset: null
              } | null
            } | null
          } | null
          video?: 'video_grid' | 'video_long' | 'video_short'
          muxPlaceholderTimestamp?: string
          size: {
            _id: string
            _type: 'grid-size'
            title: string | null
            size: number | null
          } | null
          _type: 'projectItem'
          _key: string
        }> | null
      }
    | {
        _key: string
        _type: 'richText'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'two-column-text-image'
        leftSlot?: {
          contentType?: 'image' | 'text'
          text?: RichText
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            _type: 'image'
          }
        }
        rightSlot?: {
          contentType?: 'image' | 'text'
          text?: string
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            _type: 'image'
          }
        }
      }
  > | null
} | null
// Variable: PARALLEL_PROJECT_QUERY
// Query: *[_type == "project-parallel" && language == $language && slug.current == $slug][0]{      _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  },    metaTitle,    metaDescription,    pageBuilder[] {  ...,  _type == "full-screen-infinite-project-slider" => {      "projects": projects[] {    _type,    "project": select(      _type == "project" => {        ...project->{          ...,            _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  }        },        "video": video,        "muxPlaceholderTimestamp": muxPlaceholderTimestamp,      }    ),    "item": select(      _type == "item" => {        ...,          _id,  _type,  title,  tagLabel,  tag,  video {    asset-> {      playbackId,      assetId,      filename,      aspect_ratio    }  },  muxPlaceholderTimestamp      }    )  }  },  _type == "projects-grid" => {      "projects": projects[] {    ...,    "size": size->{        _id,  _type,  title,  size    },    "project": project->{        _id,  _type,  details,  slug,  language,  color,  Videos {    video_short {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    },    video_long {      asset-> {        playbackId,        assetId,        filename,        aspect_ratio      }    }  }    }  }  },    _type == "custom-column-image-grid" => {    ...,    images[] {      ...,        "url": asset->url    }  }}  }
export type PARALLEL_PROJECT_QUERYResult = {
  _id: string
  _type: 'project-parallel'
  details: {
    title?: string
    description?: string
    expertise?: string
    customer?: string
  } | null
  slug: Slug | null
  language: string | null
  color: SimplerColor | null
  Videos: {
    video_short: {
      asset: null
    } | null
    video_long: {
      asset: null
    } | null
  } | null
  metaTitle: string | null
  metaDescription: string | null
  pageBuilder: Array<
    | {
        _key: string
        _type: 'about-section'
        links?: Array<{
          isExternal?: boolean
          targetBlank?: boolean
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page-parallel'
          }
          url?: string
          title?: string
          _type: 'link'
          _key: string
        }>
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        linkContent?: {
          isExternal?: boolean
          targetBlank?: boolean
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page-parallel'
          }
          url?: string
          title?: string
        }
        jobs?: Array<{
          title?: string
          link?: {
            isExternal?: boolean
            targetBlank?: boolean
            page?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'page-parallel'
            }
            url?: string
            title?: string
          }
          _type: 'job'
          _key: string
        }>
        bottomContentLeft?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        bottomContentRight?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'custom-column-image-grid'
        images: Array<{
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
          _key: string
          url: string | null
        }> | null
      }
    | {
        _key: string
        _type: 'full-screen-infinite-project-slider'
        title?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        settings?: {
          sliderSpeed?: number
        }
        projects: Array<
          | {
              _type: 'item'
              project: null
              item: {
                title: string | null
                tagLabel: string | null
                tag: string | null
                video: {
                  asset: null
                } | null
                muxPlaceholderTimestamp: string | null
                _type: 'item'
                _key: string
                _id: null
              }
            }
          | {
              _type: 'project'
              project:
                | {
                    _id: string
                    _type: 'project-parallel'
                    _createdAt: string
                    _updatedAt: string
                    _rev: string
                    language: string | null
                    languageTitle?: string
                    metaTitle?: string
                    metaDescription?: string
                    slug: Slug | null
                    color: SimplerColor | null
                    details: {
                      title?: string
                      description?: string
                      expertise?: string
                      customer?: string
                    } | null
                    Videos: {
                      video_short: {
                        asset: null
                      } | null
                      video_long: {
                        asset: null
                      } | null
                    } | null
                    pageBuilder?: Array<
                      | ({
                          _key: string
                        } & AboutSection)
                      | ({
                          _key: string
                        } & CustomColumnImageGrid)
                      | ({
                          _key: string
                        } & FullScreenInfiniteProjectSlider)
                      | ({
                          _key: string
                        } & FullWidthVideo)
                      | ({
                          _key: string
                        } & ProjectHero)
                      | ({
                          _key: string
                        } & ProjectsGrid)
                      | ({
                          _key: string
                        } & RichText)
                      | ({
                          _key: string
                        } & TwoColumnTextImage)
                    >
                    video: 'video_grid' | 'video_long' | 'video_short' | null
                    muxPlaceholderTimestamp: string | null
                  }
                | {
                    video: 'video_grid' | 'video_long' | 'video_short' | null
                    muxPlaceholderTimestamp: string | null
                  }
              item: null
            }
        > | null
      }
    | {
        _key: string
        _type: 'full-width-video'
        video?: MuxVideo
        muxPlaceholderTimestamp?: string
      }
    | {
        _key: string
        _type: 'project-hero'
        layout?: 'full-width' | 'two-column'
        video?: 'video_grid' | 'video_long' | 'video_short'
        muxPlaceholderTimestamp?: string
      }
    | {
        _key: string
        _type: 'projects-grid'
        projects: Array<{
          project: {
            _id: string
            _type: 'project-parallel'
            details: {
              title?: string
              description?: string
              expertise?: string
              customer?: string
            } | null
            slug: Slug | null
            language: string | null
            color: SimplerColor | null
            Videos: {
              video_short: {
                asset: null
              } | null
              video_long: {
                asset: null
              } | null
            } | null
          } | null
          video?: 'video_grid' | 'video_long' | 'video_short'
          muxPlaceholderTimestamp?: string
          size: {
            _id: string
            _type: 'grid-size'
            title: string | null
            size: number | null
          } | null
          _type: 'projectItem'
          _key: string
        }> | null
      }
    | {
        _key: string
        _type: 'richText'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'link-large'
            | 'link-small'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'two-column-text-image'
        leftSlot?: {
          contentType?: 'image' | 'text'
          text?: RichText
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            _type: 'image'
          }
        }
        rightSlot?: {
          contentType?: 'image' | 'text'
          text?: string
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            _type: 'image'
          }
        }
      }
  > | null
} | null

// Source: ./src/sanity/lib/utils.ts
// Variable: query
// Query: !defined(*[    _type == $type &&    !(_id in [$draft, $published]) &&    $typeField == $id  ][0]._id)
export type QueryResult = false | true

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  {\n    title,\n    isExternal,\n    url,\n    "slug": page->slug.current,\n    targetBlank,\n  }\n': FIELDS_LINKResult
    '*[_type == "locale"]{id, title}':
      | LOCALES_QUERYResult
      | LOCALES_QUERY_RESULTResult
    '\n  *[_type == "footer-parallel" && language == $language][0]{\n    ...,\n    links[] \n  {\n    title,\n    isExternal,\n    url,\n    "slug": page->slug.current,\n    targetBlank,\n  }\n,\n  }\n': PARALLEL_FOOTER_QUERYResult
    '\n  *[_type == "header-parallel" && language == $language][0]{\n    ...,\n    links[] \n  {\n    title,\n    isExternal,\n    url,\n    "slug": page->slug.current,\n    targetBlank,\n  }\n,\n  }\n': PARALLEL_HEADER_QUERYResult
    '\n  *[_type == "project-parallel" && language == $language]\n  | order(_createdAt desc) {\n    \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n\n  }\n': PARALLEL_PROJECTS_QUERYResult
    '\n  *[_type == "home-page-parallel" && language == $language][0]{\n    metaTitle,\n    metaDescription,\n    pageBuilder[] \n{\n  ...,\n  _type == "full-screen-infinite-project-slider" => {\n    \n  "projects": projects[] {\n    _type,\n    "project": select(\n      _type == "project" => {\n        ...project->{\n          ...,\n          \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n\n        },\n        "video": video,\n        "muxPlaceholderTimestamp": muxPlaceholderTimestamp,\n      }\n    ),\n\n    "item": select(\n      _type == "item" => {\n        ...,\n        \n  _id,\n  _type,\n  title,\n  tagLabel,\n  tag,\n  video {\n    asset-> {\n      playbackId,\n      assetId,\n      filename,\n      aspect_ratio\n    }\n  },\n  muxPlaceholderTimestamp\n\n      }\n    )\n  }\n\n  },\n\n  _type == "projects-grid" => {\n    \n  "projects": projects[] {\n    ...,\n    "size": size->{\n      \n  _id,\n  _type,\n  title,\n  size\n\n    },\n    "project": project->{\n      \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n\n    }\n  }\n\n  },\n  \n  _type == "custom-column-image-grid" => {\n    ...,\n    images[] {\n      ...,\n      \n  "url": asset->url\n\n    }\n  }\n}\n\n  }\n': PARALLEL_HOME_PAGE_QUERYResult
    '\n  *[_type == "page-parallel" && language == $language && slug.current == $slug][0]{\n    metaTitle,\n    metaDescription,\n    slug,\n    pageBuilder[] \n{\n  ...,\n  _type == "full-screen-infinite-project-slider" => {\n    \n  "projects": projects[] {\n    _type,\n    "project": select(\n      _type == "project" => {\n        ...project->{\n          ...,\n          \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n\n        },\n        "video": video,\n        "muxPlaceholderTimestamp": muxPlaceholderTimestamp,\n      }\n    ),\n\n    "item": select(\n      _type == "item" => {\n        ...,\n        \n  _id,\n  _type,\n  title,\n  tagLabel,\n  tag,\n  video {\n    asset-> {\n      playbackId,\n      assetId,\n      filename,\n      aspect_ratio\n    }\n  },\n  muxPlaceholderTimestamp\n\n      }\n    )\n  }\n\n  },\n\n  _type == "projects-grid" => {\n    \n  "projects": projects[] {\n    ...,\n    "size": size->{\n      \n  _id,\n  _type,\n  title,\n  size\n\n    },\n    "project": project->{\n      \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n\n    }\n  }\n\n  },\n  \n  _type == "custom-column-image-grid" => {\n    ...,\n    images[] {\n      ...,\n      \n  "url": asset->url\n\n    }\n  }\n}\n\n  }\n': PARALLEL_PAGE_QUERYResult
    '\n  *[_type == "project-parallel" && language == $language && slug.current == $slug][0]{\n    \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n,\n    metaTitle,\n    metaDescription,\n    pageBuilder[] \n{\n  ...,\n  _type == "full-screen-infinite-project-slider" => {\n    \n  "projects": projects[] {\n    _type,\n    "project": select(\n      _type == "project" => {\n        ...project->{\n          ...,\n          \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n\n        },\n        "video": video,\n        "muxPlaceholderTimestamp": muxPlaceholderTimestamp,\n      }\n    ),\n\n    "item": select(\n      _type == "item" => {\n        ...,\n        \n  _id,\n  _type,\n  title,\n  tagLabel,\n  tag,\n  video {\n    asset-> {\n      playbackId,\n      assetId,\n      filename,\n      aspect_ratio\n    }\n  },\n  muxPlaceholderTimestamp\n\n      }\n    )\n  }\n\n  },\n\n  _type == "projects-grid" => {\n    \n  "projects": projects[] {\n    ...,\n    "size": size->{\n      \n  _id,\n  _type,\n  title,\n  size\n\n    },\n    "project": project->{\n      \n  _id,\n  _type,\n  details,\n  slug,\n  language,\n  color,\n  Videos {\n    video_short {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    },\n    video_long {\n      asset-> {\n        playbackId,\n        assetId,\n        filename,\n        aspect_ratio\n      }\n    }\n  }\n\n    }\n  }\n\n  },\n  \n  _type == "custom-column-image-grid" => {\n    ...,\n    images[] {\n      ...,\n      \n  "url": asset->url\n\n    }\n  }\n}\n\n  }\n': PARALLEL_PROJECT_QUERYResult
    '!defined(*[\n    _type == $type &&\n    !(_id in [$draft, $published]) &&\n    $typeField == $id\n  ][0]._id)': QueryResult
  }
}
