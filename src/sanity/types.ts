/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type CustomColumnMediaGrid = {
  _type: 'custom-column-media-grid'
  width?: number
  media?: Array<
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
    | {
        video?: MuxVideo
        autoplay?: boolean
        _key: string
      }
  >
}

export type AboutSection = {
  _type: 'about-section'
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
    _type: 'link'
    _key: string
  }>
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'link-large'
          | 'link-small'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | ({
        _key: string
      } & Code)
  >
  linkContent?: {
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
  }
  jobs?: Array<{
    title?: string
    link?: {
      isExternal?: boolean
      targetBlank?: boolean
      page?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page-parallel'
      }
      url?: string
      title?: string
    }
    _type: 'job'
    _key: string
  }>
  bottomContentLeft?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'link-large'
          | 'link-small'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | ({
        _key: string
      } & Code)
  >
  bottomContentRight?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'link-large'
          | 'link-small'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | ({
        _key: string
      } & Code)
  >
}

export type ProjectsGrid = {
  _type: 'projects-grid'
  projects?: Array<{
    project?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'project-parallel'
    }
    video?: 'video_short' | 'video_long' | 'video_grid'
    muxPlaceholderTimestamp?: string
    autoPlay?: boolean
    playOnHover?: boolean
    lazyLoad?: boolean
    preloadVideo?: 'none' | 'metadata' | 'auto'
    size?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'grid-size'
    }
    _type: 'projectItem'
    _key: string
  }>
  gridOptimization?: {
    enableIntersectionObserver?: boolean
    intersectionThreshold?: number
    preloadCount?: number
  }
}

export type ProjectGridRowType = {
  _type: 'project-grid-row-type'
  projectItem?: {
    project?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'project-parallel'
    }
    video?: 'video_short' | 'video_long' | 'video_grid'
    muxPlaceholderTimestamp?: string
    size?: 'wide' | 'medium' | 'narrow'
  }
}

export type FullScreenInfiniteProjectSlider = {
  _type: 'full-screen-infinite-project-slider'
  title?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'link-large'
          | 'link-small'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | ({
        _key: string
      } & Code)
  >
  settings?: {
    sliderSpeed?: number
  }
  projects?: Array<
    | {
        project?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'project-parallel'
        }
        video?: 'video_short' | 'video_long' | 'video_grid'
        muxPlaceholderTimestamp?: string
        _type: 'project'
        _key: string
      }
    | {
        title?: string
        tagLabel?: string
        tag?: string
        video?: MuxVideo
        muxPlaceholderTimestamp?: string
        _type: 'item'
        _key: string
      }
  >
}

export type TwoColumnTextImage = {
  _type: 'two-column-text-image'
  leftSlot?: {
    contentType?: 'text' | 'image'
    text?: RichText
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }
  rightSlot?: {
    contentType?: 'text' | 'image'
    text?: RichText
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }
}

export type CustomColumnImageGrid = {
  _type: 'custom-column-image-grid'
  width?: number
  images?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
    _key: string
  }>
}

export type ProjectHero = {
  _type: 'project-hero'
  layout?: 'full-width' | 'two-column'
  video?: 'video_short' | 'video_long' | 'video_grid'
  muxPlaceholderTimestamp?: string
}

export type FullWidthVideo = {
  _type: 'full-width-video'
  video?: MuxVideo
  muxPlaceholderTimestamp?: string
}

export type Locale = {
  _id: string
  _type: 'locale'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  id?: string
}

export type Code = {
  _type: 'code'
  language?: string
  filename?: string
  code?: string
  highlightedLines?: Array<number>
}

export type InternationalizedArrayTextValue = {
  _type: 'internationalizedArrayTextValue'
  value?: string
}

export type InternationalizedArrayStringValue = {
  _type: 'internationalizedArrayStringValue'
  value?: string
}

export type InternationalizedArrayText = Array<
  {
    _key: string
  } & InternationalizedArrayTextValue
>

export type InternationalizedArrayString = Array<
  {
    _key: string
  } & InternationalizedArrayStringValue
>

export type TranslationMetadata = {
  _id: string
  _type: 'translation.metadata'
  _createdAt: string
  _updatedAt: string
  _rev: string
  translations?: Array<
    {
      _key: string
    } & InternationalizedArrayReferenceValue
  >
  schemaTypes?: Array<string>
}

export type InternationalizedArrayReferenceValue = {
  _type: 'internationalizedArrayReferenceValue'
  value?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home-page-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home-page-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'project-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'project-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'footer-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'footer-parallel'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'header-parachutes'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'header-parallel'
      }
}

export type HeaderParallel = {
  _id: string
  _type: 'header-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
    _type: 'link'
    _key: string
  }>
}

export type HeaderParachutes = {
  _id: string
  _type: 'header-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parachutes'
    }
    url?: string
    _type: 'link'
    _key: string
  }>
}

export type FooterParallel = {
  _id: string
  _type: 'footer-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parallel'
    }
    url?: string
    title?: string
    _type: 'link'
    _key: string
  }>
}

export type FooterParachutes = {
  _id: string
  _type: 'footer-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  links?: Array<{
    isExternal?: boolean
    targetBlank?: boolean
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page-parachutes'
    }
    url?: string
    _type: 'link'
    _key: string
  }>
}

export type PageParachutes = {
  _id: string
  _type: 'page-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & CustomColumnMediaGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
}

export type ProjectParachutes = {
  _id: string
  _type: 'project-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & CustomColumnMediaGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
  color?: SimplerColor
  expertise?: string
  customer?: string
}

export type HomePageParallel = {
  _id: string
  _type: 'home-page-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & CustomColumnMediaGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
  metaTitle?: string
  metaDescription?: string
}

export type HomePageParachutes = {
  _id: string
  _type: 'home-page-parachutes'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  metaTitle?: string
  metaDescription?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & CustomColumnMediaGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
}

export type ProjectParallel = {
  _id: string
  _type: 'project-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  color?: SimplerColor
  details?: {
    title?: string
    description?: string
    expertise?: string
    customer?: string
  }
  Videos?: {
    video_short?: MuxVideo
    video_long?: MuxVideo
    video_grid?: MuxVideo
  }
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & CustomColumnMediaGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
  metaTitle?: string
  metaDescription?: string
  slug?: Slug
}

export type PageParallel = {
  _id: string
  _type: 'page-parallel'
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  languageTitle?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & FullWidthVideo)
    | ({
        _key: string
      } & RichText)
    | ({
        _key: string
      } & CustomColumnImageGrid)
    | ({
        _key: string
      } & CustomColumnMediaGrid)
    | ({
        _key: string
      } & TwoColumnTextImage)
    | ({
        _key: string
      } & FullScreenInfiniteProjectSlider)
    | ({
        _key: string
      } & ProjectHero)
    | ({
        _key: string
      } & ProjectsGrid)
    | ({
        _key: string
      } & AboutSection)
  >
  metaTitle?: string
  metaDescription?: string
  slug?: Slug
}

export type GridSize = {
  _id: string
  _type: 'grid-size'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  size?: number
}

export type RichText = {
  _type: 'richText'
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'link-large'
          | 'link-small'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | ({
        _key: string
      } & Code)
  >
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type InternationalizedArrayReference = Array<
  {
    _key: string
  } & InternationalizedArrayReferenceValue
>

export type HighlightColor = {
  _type: 'highlightColor'
  label?: string
  value?: string
}

export type TextColor = {
  _type: 'textColor'
  label?: string
  value?: string
}

export type SimplerColor = {
  _type: 'simplerColor'
  label?: string
  value?: string
}

export type MuxVideo = {
  _type: 'mux.video'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'mux.videoAsset'
  }
}

export type MuxVideoAsset = {
  _type: 'mux.videoAsset'
  status?: string
  assetId?: string
  playbackId?: string
  filename?: string
  thumbTime?: number
  data?: MuxAssetData
}

export type MuxAssetData = {
  _type: 'mux.assetData'
  resolution_tier?: string
  upload_id?: string
  created_at?: string
  id?: string
  status?: string
  max_stored_resolution?: string
  passthrough?: string
  encoding_tier?: string
  master_access?: string
  aspect_ratio?: string
  duration?: number
  max_stored_frame_rate?: number
  mp4_support?: string
  max_resolution_tier?: string
  tracks?: Array<
    {
      _key: string
    } & MuxTrack
  >
  playback_ids?: Array<
    {
      _key: string
    } & MuxPlaybackId
  >
  static_renditions?: MuxStaticRenditions
}

export type MuxStaticRenditions = {
  _type: 'mux.staticRenditions'
  status?: string
  files?: Array<
    {
      _key: string
    } & MuxStaticRenditionFile
  >
}

export type MuxStaticRenditionFile = {
  _type: 'mux.staticRenditionFile'
  ext?: string
  name?: string
  width?: number
  bitrate?: number
  filesize?: number
  height?: number
}

export type MuxPlaybackId = {
  _type: 'mux.playbackId'
  id?: string
  policy?: string
}

export type MuxTrack = {
  _type: 'mux.track'
  id?: string
  type?: string
  max_width?: number
  max_frame_rate?: number
  duration?: number
  max_height?: number
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | CustomColumnMediaGrid
  | AboutSection
  | ProjectsGrid
  | ProjectGridRowType
  | FullScreenInfiniteProjectSlider
  | TwoColumnTextImage
  | CustomColumnImageGrid
  | ProjectHero
  | FullWidthVideo
  | Locale
  | Code
  | InternationalizedArrayTextValue
  | InternationalizedArrayStringValue
  | InternationalizedArrayText
  | InternationalizedArrayString
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | HeaderParallel
  | HeaderParachutes
  | FooterParallel
  | FooterParachutes
  | PageParachutes
  | ProjectParachutes
  | HomePageParallel
  | HomePageParachutes
  | ProjectParallel
  | PageParallel
  | GridSize
  | RichText
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | InternationalizedArrayReference
  | HighlightColor
  | TextColor
  | SimplerColor
  | MuxVideo
  | MuxVideoAsset
  | MuxAssetData
  | MuxStaticRenditions
  | MuxStaticRenditionFile
  | MuxPlaybackId
  | MuxTrack
  | MediaTag
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
